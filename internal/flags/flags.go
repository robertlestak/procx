package flags

import "flag"

var (
	FlagSet                     = flag.NewFlagSet("", flag.ContinueOnError)
	FlagDriver                  = FlagSet.String("driver", "", "driver to use. (aws-sqs, cassandra, centauri, gcp-pubsub, postgres, mongodb, mysql, rabbitmq, redis-list, redis-pubsub, local)")
	FlagHostEnv                 = FlagSet.Bool("hostenv", false, "use host environment")
	FlagAWSRegion               = FlagSet.String("aws-region", "", "AWS region")
	FlagAWSLoadConfig           = FlagSet.Bool("aws-load-config", false, "load AWS config from ~/.aws/config")
	FlagSQSRoleARN              = FlagSet.String("aws-sqs-role-arn", "", "AWS SQS role ARN")
	FlagSQSQueueURL             = FlagSet.String("aws-sqs-queue-url", "", "AWS SQS queue URL")
	FlagCassandraHosts          = FlagSet.String("cassandra-hosts", "", "Cassandra hosts")
	FlagCassandraUser           = FlagSet.String("cassandra-user", "", "Cassandra user")
	FlagCassandraPassword       = FlagSet.String("cassandra-password", "", "Cassandra password")
	FlagCassandraKeyspace       = FlagSet.String("cassandra-keyspace", "", "Cassandra keyspace")
	FlagCassandraConsistency    = FlagSet.String("cassandra-consistency", "QUORUM", "Cassandra consistency")
	FlagCassandraRetrieveQuery  = FlagSet.String("cassandra-retrieve-query", "", "Cassandra retrieve query")
	FlagCassandraRetrieveParams = FlagSet.String("cassandra-retrieve-params", "", "Cassandra retrieve params")
	FlagCassandraClearQuery     = FlagSet.String("cassandra-clear-query", "", "Cassandra clear query")
	FlagCassandraClearParams    = FlagSet.String("cassandra-clear-params", "", "Cassandra clear params")
	FlagCassandraFailQuery      = FlagSet.String("cassandra-fail-query", "", "Cassandra fail query")
	FlagCassandraFailParams     = FlagSet.String("cassandra-fail-params", "", "Cassandra fail params")
	FlagCassandraQueryKey       = FlagSet.Bool("cassandra-query-key", false, "Cassandra query returns key as first column and value as second column")
	FlagCentauriPeerURL         = FlagSet.String("centauri-peer-url", "", "Centauri peer URL")
	FlagCentauriChannel         = FlagSet.String("centauri-channel", "default", "Centauri channel")
	FlagCentauriKey             = FlagSet.String("centauri-key", "", "Centauri key")
	FlagGCPProjectID            = FlagSet.String("gcp-project-id", "", "GCP project ID")
	FlagGCPSubscription         = FlagSet.String("gcp-pubsub-subscription", "", "GCP Pub/Sub subscription name")
	FlagPassWorkAsArg           = FlagSet.Bool("pass-work-as-arg", false, "pass work as an argument")
	FlagPsqlHost                = FlagSet.String("psql-host", "", "PostgreSQL host")
	FlagPsqlPort                = FlagSet.String("psql-port", "5432", "PostgreSQL port")
	FlagPsqlUser                = FlagSet.String("psql-user", "", "PostgreSQL user")
	FlagPsqlPassword            = FlagSet.String("psql-password", "", "PostgreSQL password")
	FlagPsqlDatabase            = FlagSet.String("psql-database", "", "PostgreSQL database")
	FlagPsqlSSLMode             = FlagSet.String("psql-ssl-mode", "disable", "PostgreSQL SSL mode")
	FlagPsqlQueryKey            = FlagSet.Bool("psql-query-key", false, "PostgreSQL query returns key as first column and value as second column")
	FlagPsqlRetrieveQuery       = FlagSet.String("psql-retrieve-query", "", "PostgreSQL retrieve query")
	FlagPsqlRetrieveParams      = FlagSet.String("psql-retrieve-params", "", "PostgreSQL retrieve params")
	FlagPsqlClearQuery          = FlagSet.String("psql-clear-query", "", "PostgreSQL clear query")
	FlagPsqlClearParams         = FlagSet.String("psql-clear-params", "", "PostgreSQL clear params")
	FlagPsqlFailQuery           = FlagSet.String("psql-fail-query", "", "PostgreSQL fail query")
	FlagPsqlFailParams          = FlagSet.String("psql-fail-params", "", "PostgreSQL fail params")
	FlagMongoHost               = FlagSet.String("mongo-host", "", "MongoDB host")
	FlagMongoPort               = FlagSet.String("mongo-port", "27017", "MongoDB port")
	FlagMongoUser               = FlagSet.String("mongo-user", "", "MongoDB user")
	FlagMongoPassword           = FlagSet.String("mongo-password", "", "MongoDB password")
	FlagMongoDatabase           = FlagSet.String("mongo-database", "", "MongoDB database")
	FlagMongoCollection         = FlagSet.String("mongo-collection", "", "MongoDB collection")
	FlagMongoRetrieveQuery      = FlagSet.String("mongo-retrieve-query", "", "MongoDB retrieve query")
	FlagMongoClearQuery         = FlagSet.String("mongo-clear-query", "", "MongoDB clear query")
	FlagMongoFailQuery          = FlagSet.String("mongo-fail-query", "", "MongoDB fail query")
	FlagMysqlHost               = FlagSet.String("mysql-host", "", "MySQL host")
	FlagMysqlPort               = FlagSet.String("mysql-port", "3306", "MySQL port")
	FlagMysqlUser               = FlagSet.String("mysql-user", "", "MySQL user")
	FlagMysqlPassword           = FlagSet.String("mysql-password", "", "MySQL password")
	FlagMysqlDatabase           = FlagSet.String("mysql-database", "", "MySQL database")
	FlagMysqlQueryKey           = FlagSet.Bool("mysql-query-key", false, "MySQL query returns key as first column and value as second column")
	FlagMysqlRetrieveQuery      = FlagSet.String("mysql-retrieve-query", "", "MySQL retrieve query")
	FlagMysqlRetrieveParams     = FlagSet.String("mysql-retrieve-params", "", "MySQL retrieve params")
	FlagMysqlClearQuery         = FlagSet.String("mysql-clear-query", "", "MySQL clear query")
	FlagMysqlClearParams        = FlagSet.String("mysql-clear-params", "", "MySQL clear params")
	FlagMysqlFailQuery          = FlagSet.String("mysql-fail-query", "", "MySQL fail query")
	FlagMysqlFailParams         = FlagSet.String("mysql-fail-params", "", "MySQL fail params")
	FlagRabbitMQURL             = FlagSet.String("rabbitmq-url", "", "RabbitMQ URL")
	FlagRabbitMQQueue           = FlagSet.String("rabbitmq-queue", "", "RabbitMQ queue")
	FlagRedisHost               = FlagSet.String("redis-host", "", "Redis host")
	FlagRedisPort               = FlagSet.String("redis-port", "6379", "Redis port")
	FlagRedisPassword           = FlagSet.String("redis-password", "", "Redis password")
	FlagRedisKey                = FlagSet.String("redis-key", "", "Redis key")
	FlagDaemon                  = FlagSet.Bool("daemon", false, "run as daemon")
)
