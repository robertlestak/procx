package main

import "flag"

var (
	Version                     = "dev"
	flagDriver                  = flag.String("driver", "", "driver to use. (aws-sqs, cassandra, centauri, gcp-pubsub, postgres, mongodb, mysql, rabbitmq, redis-list, redis-pubsub, local)")
	flagHostEnv                 = flag.Bool("hostenv", false, "use host environment")
	flagAWSRegion               = flag.String("aws-region", "", "AWS region")
	flagAWSLoadConfig           = flag.Bool("aws-load-config", false, "load AWS config from ~/.aws/config")
	flagSQSRoleARN              = flag.String("aws-sqs-role-arn", "", "AWS SQS role ARN")
	flagSQSQueueURL             = flag.String("aws-sqs-queue-url", "", "AWS SQS queue URL")
	flagCassandraHosts          = flag.String("cassandra-hosts", "", "Cassandra hosts")
	flagCassandraUser           = flag.String("cassandra-user", "", "Cassandra user")
	flagCassandraPassword       = flag.String("cassandra-password", "", "Cassandra password")
	flagCassandraKeyspace       = flag.String("cassandra-keyspace", "", "Cassandra keyspace")
	flagCassandraConsistency    = flag.String("cassandra-consistency", "QUORUM", "Cassandra consistency")
	flagCassandraRetrieveQuery  = flag.String("cassandra-retrieve-query", "", "Cassandra retrieve query")
	flagCassandraRetrieveParams = flag.String("cassandra-retrieve-params", "", "Cassandra retrieve params")
	flagCassandraClearQuery     = flag.String("cassandra-clear-query", "", "Cassandra clear query")
	flagCassandraClearParams    = flag.String("cassandra-clear-params", "", "Cassandra clear params")
	flagCassandraFailQuery      = flag.String("cassandra-fail-query", "", "Cassandra fail query")
	flagCassandraFailParams     = flag.String("cassandra-fail-params", "", "Cassandra fail params")
	flagCassandraQueryKey       = flag.Bool("cassandra-query-key", false, "Cassandra query returns key as first column and value as second column")
	flagCentauriPeerURL         = flag.String("centauri-peer-url", "", "Centauri peer URL")
	flagCentauriChannel         = flag.String("centauri-channel", "default", "Centauri channel")
	flagCentauriKey             = flag.String("centauri-key", "", "Centauri key")
	flagGCPProjectID            = flag.String("gcp-project-id", "", "GCP project ID")
	flagGCPSubscription         = flag.String("gcp-pubsub-subscription", "", "GCP Pub/Sub subscription name")
	flagPassWorkAsArg           = flag.Bool("pass-work-as-arg", false, "pass work as an argument")
	flagPsqlHost                = flag.String("psql-host", "", "PostgreSQL host")
	flagPsqlPort                = flag.String("psql-port", "5432", "PostgreSQL port")
	flagPsqlUser                = flag.String("psql-user", "", "PostgreSQL user")
	flagPsqlPassword            = flag.String("psql-password", "", "PostgreSQL password")
	flagPsqlDatabase            = flag.String("psql-database", "", "PostgreSQL database")
	flagPsqlSSLMode             = flag.String("psql-ssl-mode", "disable", "PostgreSQL SSL mode")
	flagPsqlQueryKey            = flag.Bool("psql-query-key", false, "PostgreSQL query returns key as first column and value as second column")
	flagPsqlRetrieveQuery       = flag.String("psql-retrieve-query", "", "PostgreSQL retrieve query")
	flagPsqlRetrieveParams      = flag.String("psql-retrieve-params", "", "PostgreSQL retrieve params")
	flagPsqlClearQuery          = flag.String("psql-clear-query", "", "PostgreSQL clear query")
	flagPsqlClearParams         = flag.String("psql-clear-params", "", "PostgreSQL clear params")
	flagPsqlFailQuery           = flag.String("psql-fail-query", "", "PostgreSQL fail query")
	flagPsqlFailParams          = flag.String("psql-fail-params", "", "PostgreSQL fail params")
	flagMongoHost               = flag.String("mongo-host", "", "MongoDB host")
	flagMongoPort               = flag.String("mongo-port", "27017", "MongoDB port")
	flagMongoUser               = flag.String("mongo-user", "", "MongoDB user")
	flagMongoPassword           = flag.String("mongo-password", "", "MongoDB password")
	flagMongoDatabase           = flag.String("mongo-database", "", "MongoDB database")
	flagMongoCollection         = flag.String("mongo-collection", "", "MongoDB collection")
	flagMongoRetrieveQuery      = flag.String("mongo-retrieve-query", "", "MongoDB retrieve query")
	flagMongoClearQuery         = flag.String("mongo-clear-query", "", "MongoDB clear query")
	flagMongoFailQuery          = flag.String("mongo-fail-query", "", "MongoDB fail query")
	flagMysqlHost               = flag.String("mysql-host", "", "MySQL host")
	flagMysqlPort               = flag.String("mysql-port", "3306", "MySQL port")
	flagMysqlUser               = flag.String("mysql-user", "", "MySQL user")
	flagMysqlPassword           = flag.String("mysql-password", "", "MySQL password")
	flagMysqlDatabase           = flag.String("mysql-database", "", "MySQL database")
	flagMysqlQueryKey           = flag.Bool("mysql-query-key", false, "MySQL query returns key as first column and value as second column")
	flagMysqlRetrieveQuery      = flag.String("mysql-retrieve-query", "", "MySQL retrieve query")
	flagMysqlRetrieveParams     = flag.String("mysql-retrieve-params", "", "MySQL retrieve params")
	flagMysqlClearQuery         = flag.String("mysql-clear-query", "", "MySQL clear query")
	flagMysqlClearParams        = flag.String("mysql-clear-params", "", "MySQL clear params")
	flagMysqlFailQuery          = flag.String("mysql-fail-query", "", "MySQL fail query")
	flagMysqlFailParams         = flag.String("mysql-fail-params", "", "MySQL fail params")
	flagRabbitMQURL             = flag.String("rabbitmq-url", "", "RabbitMQ URL")
	flagRabbitMQQueue           = flag.String("rabbitmq-queue", "", "RabbitMQ queue")
	flagRedisHost               = flag.String("redis-host", "", "Redis host")
	flagRedisPort               = flag.String("redis-port", "6379", "Redis port")
	flagRedisPassword           = flag.String("redis-password", "", "Redis password")
	flagRedisKey                = flag.String("redis-key", "", "Redis key")
	flagDaemon                  = flag.Bool("daemon", false, "run as daemon")
)
